window.SIDEBAR_ITEMS = {"enum":[["Typing",""]],"fn":[["and","Takes an iterator of input constraints and returns a new constraint representing the logical AND of all input constraints. In practice, multiplies all input constraints together, i.e. A * B * C"],["annotate","Takes a string annotation and an expression, and returns a new constraint with the given annotation and expression."],["eq","Takes two constraints and returns a new constraint representing the equality of the input constraints."],["if_next_step","Takes a `StepTypeHandler` and a constraint, and returns a new constraint that is only applied if the next step is of the given step type."],["isz","Takes a constraint and returns a new constraint representing whether the input constraint is zero."],["lookup","Creates a new empty `LookupBuilder` object and returns it. Can an chain multiple `add` and `enable` function calls after to build the lookup table."],["next_step_must_be","Takes a `StepTypeHandler` and returns a new constraint that requires the next step to be of the given step type."],["next_step_must_not_be","Takes a `StepTypeHandler` and returns a new constraint that requires the next step to not be of the given step type."],["not","Takes a constraint and returns a new constraint representing the logical NOT of the input constraint. The input constraint must have a value of either 0 or 1."],["or","Takes an iterator of input constraints and returns a new constraint representing the logical OR of all input constraints. In practice, constructs the output constraint in the format of not(and(not(A), not(B), not(C), …)) = 0, which is equivalent to or(A, B, C, …)."],["rlc","Computes the randomized linear combination of the given expressions and randomness."],["select","Takes a selector constraint and two other constraints, and returns a new constraint that represents the value of `when_true` if the selector is true, or `when_false` if the selector is false."],["table",""],["unless","Takes a selector constraint and a `when_false` constraint, and returns a new constraint that represents the value of `when_false` unless the selector is true, in which case it returns zero."],["when","Takes a selector constraint and a `when_true` constraint, and returns a new constraint that represents the value of `when_true` if the selector is true, or zero if the selector is false."],["xor","Takes two expressions and returns a new expression representing the logical XOR of the input expressions."]],"struct":[["Constraint","Represents a constraint with an associated annotation and expression."]]};